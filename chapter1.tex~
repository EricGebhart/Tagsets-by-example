\chapter{The basics}
This chapter will cover the basics of using ODS Markup and the Template Procedure.
ODS markup relies upon tagsets to define how it should work.  
Indicating which tagset to use is the only thing that
differentiates the ODS Markup statement from any other ODS destination.
A tagset is defined using the template procedure.  The amount of
template knowledge needed is not that great, but it is good to know
the basics of using it.

\section{Tagsets and Proc Template}
\index{basics}
\index{proc template}
\index{itemstore}
\index{sasuser}
\index{sashelp}
A tagset is a template.  That means it is a proc template job that
runs in SAS.  The Template Procedure is capable of processing several different
types of templates.  All of them are quite different from each
other.  Proc template is really just a framework for declaritive languages
to be created. 

There are Table, column, style, tagsets, and statistical graphics templates.
While they do have similarities, like the define statement, they are all
just as different as they can be.  They are all templates, just like LaTeX, 
HTML and Troff are all markup languages.  The same way Python, Ruby, and Perl are
all scripting languages.  Knowing one template language will certainly not hurt
when it comes to learning another.  But thinking that all templates are the
same is in error. 

The thing all templates have in common is the basic inner-workings
of proc template. 
When a template is run, the procedure compiles
it into a binary format which is then stored on disk in an itemstore.
Typically this file will be in sasuser.  But can be placed anywhere
using the 'ODS path' statement.  If administrative priviledges are
available the template can be put in sashelp where it will be
available to all users on the system.  Once a template is compiled
there is no need to compile it again unless it's itemstore is
deleted.

\subsection{The tagset directory}
Templates are kept in directories within the itemstore.  ODS will automatically look for 
tagsets in the tagsets directory.  The following example shows how to get a list
of tagsets, and the output it generates.

\begin{fvcode}{list_tagsets}{Simple ODS Markup Statement}
       proc template;
           list tagsets;

                               The SAS System                               1
                                                  13:00 Monday, August 7, 2006

                Listing of: SASHELP.TMPLMST
                Path Filter is: Tagsets
                Sort by: PATH/ASCENDING
 
                Obs    Path                             Type
                 1     Tagsets                          Dir   
                 2     Tagsets.Cascading_stylesheet     Tagset
                 3     Tagsets.Chtml                    Tagset
                 4     Tagsets.Colorlatex               Tagset
                 5     Tagsets.Config_debug             Tagset
                 6     Tagsets.Csv                      Tagset
                 7     Tagsets.Csvall                   Tagset
                 8     Tagsets.Csvbyline                Tagset
                 9     Tagsets.Default                  Tagset
                10     Tagsets.Docbook                  Tagset
                11     Tagsets.Event_map                Tagset
                12     Tagsets.ExcelXP                  Tagset
                13     Tagsets.Graph_rtf                Tagset
                14     Tagsets.Html4                    Tagset
                15     Tagsets.Htmlcss                  Tagset
                16     Tagsets.Htmlpanel                Tagset
                17     Tagsets.Imode                    Tagset
                18     Tagsets.Latex                    Tagset
                19     Tagsets.MSOffice2k               Tagset
                20     Tagsets.Mlatex                   Tagset
                21     Tagsets.Mvshtml                  Tagset
                22     Tagsets.Namedhtml                Tagset
                23     Tagsets.Odsapp                   Tagset
                24     Tagsets.Odsgraph                 Tagset
                25     Tagsets.Odsstyle                 Tagset
                26     Tagsets.Odsxrpcs                 Tagset
                27     Tagsets.OpenOffice_rtf           Tagset
                28     Tagsets.Phtml                    Tagset
                29     Tagsets.Pyx                      Tagset
                30     Tagsets.Rtf                      Tagset
                31     Tagsets.Rtf_sample               Tagset
                32     Tagsets.SASReport11              Tagset
                33     Tagsets.SASReport12              Tagset
                34     Tagsets.SASReport13              Tagset
                35     Tagsets.SASReport14              Tagset
                36     Tagsets.SASReport15              Tagset
                37     Tagsets.SASReport_html           Tagset
                38     Tagsets.SASReport_html1          Tagset
                39     Tagsets.Sasreport_html11         Tagset
                40     Tagsets.Short_map                Tagset
                41     Tagsets.Simplelatex              Tagset
                42     Tagsets.Style_display            Tagset
                43     Tagsets.Style_popup              Tagset
                44     Tagsets.Supermap                 Tagset
                45     Tagsets.Tablesonlylatex          Tagset
                46     Tagsets.Text_map                 Tagset
                47     Tagsets.Tpl_style_list           Tagset
                48     Tagsets.Tpl_style_map            Tagset
                49     Tagsets.Troff                    Tagset
                50     Tagsets.Wml                      Tagset
                51     Tagsets.Wmlolist                 Tagset
                52     Tagsets.Xbrl                     Tagset
                53     Tagsets.Xhtml                    Tagset
       run;

NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           1:40.15
      cpu time            0.28 seconds
      
\end{fvcode}

\section{Using a tagset}
To use a tagset, all that is needed is the proper ods statement.
ODS Markup is not all that different from ODS HTML, in fact, ODS
Markup can do everything ODS HTML can, plus a little more.
The simplest form of the ODS Markup statement is shown 
in Figure \ref{ods_markup_stmt} on page \pageref{ods_markup_stmt}.

\index{ods statement}
\begin{fvcode}{ods_markup_stmt}{Simple ODS Markup Statement}
   
    ods markup file='test.xml';

    ....

    ods markup close;

\end{fvcode}

\index{ods markup statement}
\index{tagsets.default}

The result of those statements will be the creation of the 'test.xml' output
file.  The output of that file will have a format as defined by the default
tagset, which is named, tagsets.default.

But there are other ways to specify an ODS statement that accomplishes the same thing.
Figure \ref{ods_markup_stmt_perm} on page \pageref{ods_markup_stmt_perm}.
shows ods statements which are equivalent with one exception.

\begin{fvcode}{ods_markup_stmt_perm}{ODS Markup Statement Permutations}
\index{ods markup statement!permutations}

    ods markup file='test.xml';

    ods markup tagset=default file='test2.xml';

    ods tagsets.default file='test3.xml';

\end{fvcode}

The exception is the third statement.  That statement is different because the destination
name is no longer markup.  The destination name is tagsets.default.   Because it has a
unique name it can run simultaneously with ods markup.  Just like ODS RTF can run simultaneously
with ODS HTML.  The first two statements cannot be used simultaneously because they have the
same destination name.  The second ODS Markup 
statement would automatically close the first one.  This happens because ODS destination names
must be unique.  There is a way around that, using ODS' ID syntax, but that belongs in another
book.

For SAS 9.1, ODS HTML is also a tagset.  Which means ODS HTML is really ODS Markup.  Consider
the statements in figure \ref{ods_markup_stmt_perm2} on page \pageref{ods_markup_stmt_perm2}.

\index{ods markup statement!permutations}
\begin{fvcode}{ods_markup_stmt_perm2}{ODS Markup Statement Permutations}
    ods html file='test1.html';

    ods html4 file='test2.html';

    ods tagsets.html4 file='test3.html';

    ods markup tagset=html4 file='test4.html'
\end{fvcode}

Each one of those statements is roughly equivalent.  All of them use the html4 tagset.  So
the markup each of them creates will be the same.  But each ODS statement creates a unique
output destination.  They can all run simultaneously without conflict.  The can all have their
own select or exclude statements and be opened or closed at different times.   
They are as different from each other as ODS RTF is different from ODS HTML.

There is one thing that makes html special.  Normally a tagset cannot be referenced by
it's simple name unless the tagset option is used. But there are a few special tagsets that
can be referenced as if they are a simple ODS destination.  
Table \ref{shortcut_destinations} on page \pageref{shortcut_destinations} shows the list
of shortcut names and their descriptions.


\index{Simple names}
\index{Shortcut destinations}
\begin{table}\caption{Shortcut Destination names}
\label{shortcut_destinations}
\begin{tabular}{l|l}
%\multicolumn{2}{c}{Shortcut Destinations} \\ 
\hline
HTML &  Alias for HTML4 \\
HTML4 & 4.0 compliant HTML with concessions for browser compatibility. \\
PHTML & Plain HTML.  Simple stylesheet, simple HTML. \\
HTMLCSS & 4.0 compliant HTML with fewer concessions. \\
CSV &  Comma separated values.  Tables only. \\
CSVAll & CSV with titles, bylines, notes, etc. \\
CSVByline & CSV with bylines only. \\
WML &  Wireless Markup Language. - No longer in vogue. \\
CHTML & Compact HTML. Very simple HTML with no styles. \\
LaTeX & LaTeX output with style and color support. \\
Troff & troff output which is very simple. \\
MSOffice2K & HTML for importing into Word and Excel. \\
Imode & Compact HTML that has no table tags.  Used extensively in Japan. \\
DocBook &  XML format for documents. \\
SasReport & XML format used internally by other SAS products.
\end{tabular}
\end{table}

While these are special, the custom tagsets that can be written are no less special.  These
custom tagsets cannot be referenced by their simple names but they will be output destinations just
as these are.  Because Markup is a single destination, the prefered way to use our custom 
tagsets will be to use their two part name as the destination name, like this example using 
the myhtml and mycsv tagsets.  Using this format will allow us to use multiple custom 
tagsets simultaneously.
See Figure \ref{ods_markup_stmt_active} on page \pageref{ods_markup_stmt_active} shows the list

\index{ods markup statement!permutations}
\index{ods markup statement!Multiple Active}
\begin{fvcode}{ods_markup_stmt_active}{Multiple Active Markup Destinations}

    ods tagsets.myhtml file='test.html';
    ods tagsets.mycsv file='test.csv';

    proc print data=sashelp.class; 
    run;

    ods tagsets.myhtml close;
    ods tagsets.mycsv close;

\end{fvcode}
     
\section{Summary}
While tagsets are templates, they are not the same as the other 
templates you may be familiar with.  In fact it is best to not
categorize templates as being a certain way.  The one thing they
all have in common is that proc template is used to compile them.
Beyond that each type of template is as different as HTML is from
LaTeX.  

Proc template is used to compile tagset code, and also to list and
view the tagsets that have been compiled.

The most confusing thing about the ods markup statement is that it
is almost never used by it's name.  Aside from that it is almost
the same as any other ods destination, especially the ODS HTML
destination in previous releases of SAS.

